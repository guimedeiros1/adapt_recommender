# -*- coding: utf-8 -*-
# Generated by Django 1.11.4 on 2017-09-06 17:01
from __future__ import unicode_literals

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0008_alter_user_username_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=30, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Learner',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('user_age', models.IntegerField()),
                ('level_of_education', models.CharField(choices=[('EF', 'Ensino Fundamental'), ('EM', 'Ensino Médio'), ('ES', 'Ensino Superior'), ('MT', 'Mestrado'), ('DT', 'Doutorado')], max_length=2)),
                ('level_of_english', models.CharField(choices=[('LL', 'Baixo'), ('ML', 'Médio'), ('HL', 'Alto')], max_length=3)),
                ('level_of_literature', models.CharField(choices=[('LL', 'Baixo'), ('ML', 'Médio'), ('HL', 'Alto')], max_length=3)),
                ('level_of_history', models.CharField(choices=[('LL', 'Baixo'), ('ML', 'Médio'), ('HL', 'Alto')], max_length=3)),
                ('level_of_biology', models.CharField(choices=[('LL', 'Baixo'), ('ML', 'Médio'), ('HL', 'Alto')], max_length=3)),
                ('level_of_physics', models.CharField(choices=[('LL', 'Baixo'), ('ML', 'Médio'), ('HL', 'Alto')], max_length=3)),
                ('level_of_math', models.CharField(choices=[('LL', 'Baixo'), ('ML', 'Médio'), ('HL', 'Alto')], max_length=3)),
                ('learning_goal', models.CharField(choices=[('STL', 'Aprendizagem a curto prazo'), ('LLL', 'Aprendizagem vitalícia')], help_text="'Aprendizagem a curto prazo' = aprender sobre um tópico específico;\n                                               'Aprendizagem vitalícia' = aprender mais sobre uma matéria;", max_length=3)),
                ('learning_style', models.CharField(choices=[('SQN', 'Aprendizagem sequencial'), ('GLB', 'Aprendizagem global')], help_text='"Aprendizagem sequencial = aprende linearmente (ex. lê um livro na sequência capítulo 1,2,3...)\n                                                    Aprendizagem global = aprende pulando conteúdo (ex. lê o livro em ordem randômica cap. 1,5,3,9...)', max_length=3)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Movie',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('movie_name', models.CharField(max_length=200)),
                ('movie_description', models.TextField(max_length=1000)),
                ('movie_pic', models.ImageField(upload_to='pics/')),
                ('movie_knowledge_area', models.CharField(choices=[('EN', 'Inglês'), ('LT', 'Literatura'), ('HT', 'História'), ('BL', 'Biologia'), ('PH', 'Física'), ('MT', 'Matémática')], max_length=2)),
                ('movie_recommended_age', models.IntegerField()),
            ],
        ),
        migrations.CreateModel(
            name='Rating',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('rating', models.IntegerField(blank=True, null=True)),
                ('predicted_rating', models.IntegerField(blank=True, null=True)),
                ('context_time', models.DateTimeField(blank=True, null=True, verbose_name='Date Rated')),
                ('long', models.DecimalField(blank=True, decimal_places=6, max_digits=8, null=True)),
                ('lat', models.DecimalField(blank=True, decimal_places=6, max_digits=8, null=True)),
                ('movie', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='recommender.Movie')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='recommender.Learner')),
            ],
        ),
    ]
